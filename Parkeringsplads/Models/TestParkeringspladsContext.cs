// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Parkeringsplads.Models;

public partial class TestParkeringspladsContext : DbContext
{
    public TestParkeringspladsContext()
    {
    }

    public TestParkeringspladsContext(DbContextOptions<TestParkeringspladsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Driver> Drivers { get; set; }

    public virtual DbSet<Request> Requests { get; set; }

    public virtual DbSet<School> Schools { get; set; }

    public virtual DbSet<Trip> Trips { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=TestParkeringsplads;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK__Address__03BDEBBA4885F6BE");

            entity.HasOne(d => d.City).WithMany(p => p.Addresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Address__City_Id__267ABA7A");
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.HasKey(e => e.CarId).HasName("PK__Car__523653F933A34B0F");

            entity.HasOne(d => d.Driver).WithMany(p => p.Cars).HasConstraintName("FK__Car__Driver_Id__36B12243");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__City__DE9DE0006724F1C2");
        });

        modelBuilder.Entity<Driver>(entity =>
        {
            entity.HasKey(e => e.DriverId).HasName("PK__Driver__F4664EB9FF03625E");

            entity.HasOne(d => d.User).WithMany(p => p.Drivers).HasConstraintName("FK__Driver__User_Id__33D4B598");
        });

        modelBuilder.Entity<Request>(entity =>
        {
            entity.HasKey(e => e.RequestId).HasName("PK__Request__E9C5B37336667E95");

            entity.HasOne(d => d.Trip).WithMany(p => p.Requests).HasConstraintName("FK__Request__Trip_Id__45F365D3");

            entity.HasOne(d => d.User).WithMany(p => p.Requests).HasConstraintName("FK__Request__User_Id__44FF419A");
        });

        modelBuilder.Entity<School>(entity =>
        {
            entity.HasKey(e => e.SchoolId).HasName("PK__School__DF2813628DFF4EEA");

            entity.HasOne(d => d.Address).WithMany(p => p.Schools)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__School__Address___29572725");
        });

        modelBuilder.Entity<Trip>(entity =>
        {
            entity.HasKey(e => e.TripId).HasName("PK__Trip__6852735E9173AC5D");

            entity.HasOne(d => d.Driver).WithMany(p => p.Trips).HasConstraintName("FK__Trip__Driver_Id__398D8EEE");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__206D9170D99449B2");

            entity.Property(e => e.Title).IsFixedLength();

            entity.HasOne(d => d.School).WithMany(p => p.Users).HasConstraintName("FK__User__School_Id__2D27B809");

            entity.HasMany(d => d.Addresses).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UserAddress",
                    r => r.HasOne<Address>().WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__UserAddre__Addre__300424B4"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserAddre__User___30F848ED"),
                    j =>
                    {
                        j.HasKey("UserId", "AddressId").HasName("PK__UserAddr__90564FCBF2D429DD");
                        j.ToTable("UserAddress");
                        j.IndexerProperty<int>("UserId").HasColumnName("User_Id");
                        j.IndexerProperty<int>("AddressId").HasColumnName("Address_Id");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}